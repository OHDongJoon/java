ch 05 함수 

5.1 익명 함수
 함수는 코드의 집합을 나타내는 자료형 , 익명 함수는 다음 형태로 만든다
 var functionVar = function() { };
 @  익명 함수 생성과 출력 : 이름이 없으므로 변수에 넣어 사용해야 한다


5.2 선언적 함수 
이름이 있으면 '선언적함수' 이름이 없으면 '익명함수'

5.3 선언적 함수(재정의) 익명함수(재정의) 실행할때 차이점
-선언적 함수(재정의) : 선언적 함수의 재정의 는 위에를 무시하고 아래 함수만 인식한다

-익명함수(재정의) : 위에서부터 아래로 차곡차곡 실행 매개변수에 잘못 넣어도 에러 안남

5.4  매개변수 
-자바 스크립트는 함수를 생성할 때 지정한 매개변수보다 많거나 적은 매개변수를 사용하는 것을 허용
-원래 함수에서 선언된 매개변수보다 많게 사용하면 추가된 매개변수는 무시
-원래 함수에서 선언된 매개변수보다 적게 사용하면 지정하지 않은 매겨변수는 undefined로 입력된다

@ Array()함수 : 빈 배열을 만든다.
@ Array(number1) : 매개변수만큼의 크기를 가진 배열을 만든다.
@ Array(any, ... , any) : 매개변수를 배열로 만든다.

5.5 가변 인자 함수 : 매개변수를 선언된 형태와 다르게 사용했을 때, 매개변수를 모두 활용할 수 있는 함수.
   arguments : 매개변수 배열 크기 ?


5.6 리턴값 return;
5.7 내부 함수 : 함수 내부에 선언하는 함수 
 @내부함수 사용 이유 : 충돌을 피하고자 

 @자기호출함수 
 - (function(){ .... })();  다른 개발자에게 영향을 주지 않게 함수를 생성하자마자 호출하는 경우

5.8 콜백함수 :
	자바스크립트에서는 함수도 하나의 자료형이므로 매개변수에
		넣을 수  있다 . 매개변수에 넣어 전달된 함수를 콜백함수라 한다.

5.9 함수를 리턴하는 함수 :
	-함수가 자료형이므로 매개변수로도 전달할 수 있지만 함수를 리턴하는 함수도 만들 수 있다
	-특정함수를 여러 번 수행하거나 이벤트 처리를 할 때 필요. 
	-리턴하는 함수를 쓰는 가장 큰 이유는 클러저 때문 
 5.10 클러저 : 리턴된 함수

5.11.1 타이머 함수
@ setTimeout(function, millisecond) : 일정시간 후 함수를 한번 실행
@ setInterval(function, millisecond) : 일정시간마다 함수를 반복해서 실행
@ clearTimeout(id) ; setTimeout 중지
@ clearInterval(id); setInterval 중지

코드 실행순서
※ 다음 코드의 실행 순서는 A, C, B이다. 
자바스크립트 함수 중에 브라우저에 처리를 부탁하는 함수인 타이머 함수는 웹 브라우저가 처리하고 
처리가 완료되었다는 것을 자바 스크립트에게 알려주는 방식이다. 
이러한 함수는 현재 단위가 끝나기전에는 실행되지 않는다.
<script>
alert('A');

setTimeout(function () {alert('B');}, 0);

alert('C');
 </script>

※ 다음 코드 실행 결과는 3,3,3 이다 0,1,2,를 출력한다고 생각 하겠지만
setTimeout()함수를 호출하는 시점이 반복문이 모두 끝난 이후이므로 발생하는 문제이다.
<script>
for (var i = 0; i < 3; i++) {

setTimeout(function (){alert(i);},0);

}
</script>